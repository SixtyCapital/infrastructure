apiVersion: v1
kind: Service
metadata:
  name: airflow-web
spec:
  type: NodePort
  selector:
    app: airflow-web
    tier: web
  ports:
    - name: airflow-web
      protocol: TCP
      port: 8080
      targetPort: airflow-web
      nodePort: 32080
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: airflow-web
    tier: web
  name: airflow-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-web
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: airflow-web
    spec:
      volumes:
      - name: cloudsql-instance-credentials
        secret:
          secretName: cloudsql-instance-credentials
      - name: ssl-certs
        hostPath:
          path: /etc/ssl/certs
      - name: cloudsql
        emptyDir: {}
      containers:
      - name: airflow-web
        image: gcr.io/sixty-capital/sixty:develop
        command:
        - /usr/local/bin/airflow-entry.sh
        - webserver
        env:
        - name: AIRFLOW_GCS_LOGS_URL
          value: gs://sixty-capital/logs/airflow
        - name: FERNET_KEY
          value: Yd02MB6W0KXvklEG1FPxOJt_A-V3ARvnvp1TMfdPivc=
        - name: REDIS_HOST
          value: redis-master
        - name: POSTGRES_DB
          value: airflow
        - name: POSTGRES_HOST
          value: localhost
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: airflow-dev
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: airflow-dev
              key: postgres-password
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 1Gi
      - image: gcr.io/cloudsql-docker/gce-proxy:1.09
        name: cloudsql-proxy
        command: ["/cloud_sql_proxy", "--dir=/cloudsql",
                  "-instances=sixty-capital:us-east1:airflow-dev=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        volumeMounts:
          - name: cloudsql-instance-credentials
            mountPath: /secrets/cloudsql
            readOnly: true
          - name: ssl-certs
            mountPath: /etc/ssl/certs
          - name: cloudsql
            mountPath: /cloudsql
      restartPolicy: Always
      # nodeSelector: !cloud.google.com/gke-preemptible
      nodeSelector:
        cloud.google.com/gke-nodepool: airflow-small
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: airflow-scheduler
    tier: scheduler
  name: airflow-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-scheduler
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: airflow-scheduler
    spec:
      volumes:
      - name: cloudsql-instance-credentials
        secret:
          secretName: cloudsql-instance-credentials
      - name: ssl-certs
        hostPath:
          path: /etc/ssl/certs
      - name: cloudsql
        emptyDir: {}
      containers:
      - name: airflow-scheduler
        image: gcr.io/sixty-capital/sixty:develop
        command:
        - /usr/local/bin/airflow-entry.sh
        - scheduler
        # suggested to let this restart after X runs for reliability
        # https://medium.com/handy-tech/airflow-tips-tricks-and-pitfalls-9ba53fba14eb
        - --num_runs=200
        env:
        - name: AIRFLOW_GCS_LOGS_URL
          value: gs://sixty-capital/logs/airflow
        - name: FERNET_KEY
          value: Yd02MB6W0KXvklEG1FPxOJt_A-V3ARvnvp1TMfdPivc=
        - name: REDIS_HOST
          value: redis-master
        - name: POSTGRES_DB
          value: airflow
        - name: POSTGRES_HOST
          value: localhost
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: airflow-dev
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: airflow-dev
              key: postgres-password
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            memory: 2Gi
          requests:
            memory: 2Gi
      - image: gcr.io/cloudsql-docker/gce-proxy:1.09
        name: cloudsql-proxy
        command: ["/cloud_sql_proxy", "--dir=/cloudsql",
                  "-instances=sixty-capital:us-east1:airflow-dev=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        volumeMounts:
          - name: cloudsql-instance-credentials
            mountPath: /secrets/cloudsql
            readOnly: true
          - name: ssl-certs
            mountPath: /etc/ssl/certs
          - name: cloudsql
            mountPath: /cloudsql
      restartPolicy: Always
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: airflow-worker
    tier: worker
  name: airflow-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: airflow-worker
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: airflow-worker
    spec:
      volumes:
      - name: cloudsql-instance-credentials
        secret:
          secretName: cloudsql-instance-credentials
      - name: ssl-certs
        hostPath:
          path: /etc/ssl/certs
      - name: cloudsql
        emptyDir: {}
      containers:
      - name: airflow-worker
        image: gcr.io/sixty-capital/sixty:develop
        command:
        - /usr/local/bin/airflow-entry.sh
        - worker
        env:
        - name: AIRFLOW_GCS_LOGS_URL
          value: gs://sixty-capital/logs/airflow
        - name: FERNET_KEY
          value: Yd02MB6W0KXvklEG1FPxOJt_A-V3ARvnvp1TMfdPivc=
        - name: REDIS_HOST
          value: redis-master
        - name: POSTGRES_DB
          value: airflow
        - name: POSTGRES_HOST
          value: localhost
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: airflow-dev
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: airflow-dev
              key: postgres-password
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            memory: 7Gi
          requests:
            memory: 7Gi
      - image: gcr.io/cloudsql-docker/gce-proxy:1.09
        name: cloudsql-proxy
        command: ["/cloud_sql_proxy", "--dir=/cloudsql",
                  "-instances=sixty-capital:us-east1:airflow-dev=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        volumeMounts:
          - name: cloudsql-instance-credentials
            mountPath: /secrets/cloudsql
            readOnly: true
          - name: ssl-certs
            mountPath: /etc/ssl/certs
          - name: cloudsql
            mountPath: /cloudsql
      restartPolicy: Always
      nodeSelector:
        cloud.google.com/gke-nodepool: airflow-worker
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis-master
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  # labels:
  #   app: redis
  #   role: master
  #   tier: backend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   matchLabels:
  #     app: guestbook
  #     role: master
  #     tier: backend
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: gcr.io/google_containers/redis:e2e
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: 2Gi
      nodeSelector:
        cloud.google.com/gke-nodepool: airflow-small
---
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  labels:
    app: redis
    role: master
    tier: backend
spec:
  ports:
    # the port that this service should serve on
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
    role: master
    tier: backend
